/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0)
            return nullptr;
        if(lists.size() == 1)
            return lists[0];
        if(lists.size() == 2)
        {
            return mergeTwoLists(lists[0],lists[1]);
        }
        
        int mid = lists.size()/2;
        vector<ListNode*> l1;
        for(int i=0;i<mid;i++)
            l1.push_back(lists[i]);
        vector<ListNode*> l2;
        for(int i =mid;i<lists.size();i++)
            l2.push_back(lists[i]);
        ListNode* p1 = mergeKLists(l1);
        ListNode* p2 = mergeKLists(l2);
        return mergeTwoLists(p1,p2);
    }
    
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1)
            return l2;
        if(!l2)
            return l1;
        if(l1->val <l2->val)
        {
            l1->next = mergeTwoLists(l1->next,l2);
            return l1;
        }
        else{
            l2->next = mergeTwoLists(l1,l2->next);
            return l2;
        }
    }
};
